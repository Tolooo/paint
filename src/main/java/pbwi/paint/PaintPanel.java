/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pbwi.paint;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.LinkedList;
import java.util.List;

public class PaintPanel extends javax.swing.JPanel {

    private static PaintPanel instance = null;
    private Class shapeClass;
    private Shape shape;
    private List<Shape> shapeList = new LinkedList();
    private List<Command> undoHistory = new LinkedList();
    private List<Command> redoHistory = new LinkedList();
    private boolean newShape;

    public void setShapeClass(Class shapeClass) {
        this.shapeClass = shapeClass;
    }
    int x, x1, y, y1;

    /**
     * Creates new form PaintPanel
     */
    public PaintPanel() {
        initComponents();
        setShapeClass(Rectangle.class);
        this.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                newShape=true;
                x = x1 = e.getX();
                y = y1 = e.getY();

            }

            @Override
            public void mouseReleased(MouseEvent e) {
                push(shape);
                newShape=false;
            }

        });
        this.addMouseMotionListener(new MouseAdapter() {

            @Override
            public void mouseDragged(MouseEvent e) {
                //To change body of generated methods, choose Tools | Templates.

                x1 = e.getX();
                y1 = e.getY();
                repaint();
            }

        });

    }

    public static PaintPanel getInstance() {
        if (instance == null) {
            instance = new PaintPanel();
        }
        return instance;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        shapeList.forEach((s) -> {
            s.draw(g);
        });
        if(newShape){
        shape = null;
        if (shapeClass == Rectangle.class) {
            shape = new Rectangle(Math.abs(y1 - y), Math.abs(x1 - x), Math.min(x1, x), Math.min(y1, y));
        } else if (shapeClass == Ellipse.class) {
            shape = new Ellipse(Math.abs(y1 - y), Math.abs(x1 - x), Math.min(x1, x), Math.min(y1, y));
        } else if (shapeClass == Line.class) {
            shape = new Line(x, y, x1, y1);
        } else if (shapeClass == Polygon.class) {
            int xpoints[] = {25, 145, 25, 145, 25};
            int ypoints[] = {25, 25, 145, 145, 25};
            int npoints = 5;

            shape = new Polygon(npoints, xpoints, ypoints);
        }
        if (shape != null) {
            shape.draw(g);
        }}

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void pop() {
        //to do usuwania obiektow raczej nie bedzie uzywane
        if (shapeList.size() > 0) {
            undoHistory.add(new UndoCommand(shapeList.remove(shapeList.size() - 1)));
            redoHistory.clear();
        }
    }

    public void push(Shape shape) {
        undoHistory.add(new RedoCommand(shape));
        redoHistory.clear();
        shapeList.add(shape);
        repaint();
//        System.out.println("Dodano:" + shapeList);
//        System.out.println("Dodano:" + undoHistory);
//        System.out.println("Dodano:" + redoHistory);
    }

    public void undo() {
        if (undoHistory.size() > 0) {
            Command c = undoHistory.remove(undoHistory.size() - 1);
            redoHistory.add(c);
            c.undo();
            repaint(); 
//            System.out.println("Cofnieto:" + shapeList);
//            System.out.println("Cofnieto:" + undoHistory);
//            System.out.println("Cofnieto:" + redoHistory);
        }
    }

    public void redo() {
        if (redoHistory.size() > 0) {
            Command c = redoHistory.remove(redoHistory.size() - 1);
            undoHistory.add(c);
            c.redo();
            repaint();
//            System.out.println("Ponowiono:" + shapeList);
//            System.out.println("Ponowiono:" + undoHistory);
//            System.out.println("Ponowiono:" + redoHistory);

        }
    }

    private class UndoCommand implements Command {

        private Shape shape;

        public UndoCommand(Shape shape) {
            this.shape = shape;
        }

        @Override
        public void undo() {
            shapeList.add(shape);
        }

        @Override
        public void redo() {
            if (shapeList.size() > 0) {
                shapeList.remove(shapeList.size() - 1);
            }
        }

    }

    private class RedoCommand implements Command {

        private Shape shape;

        public RedoCommand(Shape shape) {
            this.shape = shape;
        }

        @Override
        public void undo() {
            if (shapeList.size() > 0) {
                shapeList.remove(shapeList.size() - 1);
            }
        }

        @Override
        public void redo() {
            shapeList.add(shape);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
