/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pbwi.paint;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Stroke;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;

public class PaintPanel extends javax.swing.JPanel implements Serializable{

    private static PaintPanel instance = null;
    private Class shapeClass;
    private Shape shape;
    private Stroke stroke;
    private Color color;
    private List<Shape> shapeList = new LinkedList();
    private List<Command> undoHistory = new LinkedList();
    private List<Command> redoHistory = new LinkedList();
    private boolean newShape;
    private State state;

    public void setShapeClass(Class shapeClass) {
        this.shapeClass = shapeClass;
    }
    int x, x1, y, y1;

    /**
     * Creates new form PaintPanel
     */
    public void setStroke(float value) {
        this.stroke = new BasicStroke(value);
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public PaintPanel() {
        initComponents();
        color = Color.BLACK;
        stroke = new BasicStroke(2);
        setShapeClass(Rectangle.class);
        this.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                newShape = true;
                x = x1 = e.getX();
                y = y1 = e.getY();

            }

            @Override
            public void mouseReleased(MouseEvent e) {
                push(shape);
                newShape = false;
            }

        });
        this.addMouseMotionListener(new MouseAdapter() {

            @Override
            public void mouseDragged(MouseEvent e) {
                //To change body of generated methods, choose Tools | Templates.

                x1 = e.getX();
                y1 = e.getY();
                repaint();
            }

        });

    }

    public static PaintPanel getInstance() {
        if (instance == null) {
            instance = new PaintPanel();
        }
        return instance;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        shapeList.forEach((s) -> {
            s.draw(g);
        });
        if (newShape) {
            shape = null;
            if (shapeClass == Rectangle.class) {
                shape = new ColorDecorator(new LineStrokeDecorator(new Rectangle(Math.abs(y1 - y), Math.abs(x1 - x), Math.min(x1, x), Math.min(y1, y)), stroke), color);
            } else if (shapeClass == Ellipse.class) {
                shape = new ColorDecorator(new LineStrokeDecorator(new Ellipse(Math.abs(y1 - y), Math.abs(x1 - x), Math.min(x1, x), Math.min(y1, y)), stroke), color);
            } else if (shapeClass == Line.class) {
                shape = new ColorDecorator(new LineStrokeDecorator(new Line(x, y, x1, y1), stroke), color);
            } else if (shapeClass == Polygon.class) {

                int npoints = 5;
                int minx = Math.min(x, x1);
                int maxx = Math.max(x, x1);
                int miny = Math.min(y, y1);
                int maxy = Math.max(y, y1);

                int xpoints[] = {minx + (maxx - minx) / 2, maxx, maxx - (maxx - minx) / 5, minx + (maxx - minx) / 5, minx};
                int ypoints[] = {miny, miny + (maxy - miny) / 3, maxy, maxy, miny + (maxy - miny) / 3};

                shape = new ColorDecorator(new LineStrokeDecorator(new Polygon(npoints, xpoints, ypoints), stroke), color);
            }
            if (shape != null) {
                shape.draw(g);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

//    public Shape pop() {
//        Shape result = null;
//        if (shapeList.size() > 0) {
//            result = shapeList.remove(shapeList.size() - 1);
//            undoHistory.add(new UndoCommand(result));
//            redoHistory.clear();
//        }
//        return result;
//    }

    public void push(Shape shape) {
        undoHistory.add(new RedoCommand(shape));
        redoHistory.clear();
        shapeList.add(shape);
        repaint();
//        System.out.println("Dodano l:" + shapeList);
//        System.out.println("Dodano u:" + undoHistory);
//        System.out.println("Dodano r:" + redoHistory);
    }

    public void undo() {
        if (undoHistory.size() > 0) {
            Command c = undoHistory.remove(undoHistory.size() - 1);
            redoHistory.add(c);
            c.undo();
            repaint();
//            System.out.println("Cofnieto l:" + shapeList);
//            System.out.println("Cofnieto u:" + undoHistory);
//            System.out.println("Cofnieto r:" + redoHistory);
        }
    }

    public void redo() {
        if (redoHistory.size() > 0) {
            Command c = redoHistory.remove(redoHistory.size() - 1);
            undoHistory.add(c);
            c.redo();
            repaint();
//            System.out.println("Ponowiono l:" + shapeList);
//            System.out.println("Ponowiono u:" + undoHistory);
//            System.out.println("Ponowiono r:" + redoHistory);

        }
    }

    void visitLast(Visitor visitor) {
        if (shapeList.size() > 0) {
            Shape s = shapeList.get(shapeList.size() - 1);
            s.accept(visitor);
            undoHistory.add(new VisitorCommand(visitor, s));
            redoHistory.clear();
            repaint();
        }
    }

    private class UndoCommand implements Command {

        private Shape shape;

        public UndoCommand(Shape shape) {
            this.shape = shape;
        }

        @Override
        public void undo() {
            shapeList.add(shape);
        }

        @Override
        public void redo() {
            if (shapeList.size() > 0) {
                Shape s = shapeList.remove(shapeList.size() - 1);
            }
        }
    }

    private class RedoCommand implements Command {

        private Shape shape;

        public RedoCommand(Shape shape) {
            this.shape = shape;
        }

        @Override
        public void undo() {
            if (shapeList.size() > 0) {
                Shape s = shapeList.remove(shapeList.size() - 1);
            }
        }

        @Override
        public void redo() {
            shapeList.add(shape);
        }

    }

    public class VisitorCommand implements Command {

        private Visitor visitor, reverseVisitor;
        private Shape shape;

        public VisitorCommand(Visitor visitor, Shape shape) {
            this.visitor = visitor;
            this.shape = shape;
            this.reverseVisitor = visitor.reverse();
        }

        @Override
        public void undo() {
            shape.accept(reverseVisitor);
        }

        @Override
        public void redo() {
            shape.accept(visitor);
        }
    }

    public Memento createMemento(){
        return new Memento(shapeList, undoHistory, redoHistory);
    }
    
    public void setMemento(Memento m){
          this.state = m.getState();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
